#!/bin/bash

# Usage: fork GH_ORG_NAME/GH_REPO_NAME [DIR_NAME]
# 
# forks and clones a repo using hub credentials, and modifies the .git/config
# to work with hub pull-requests
#
# Adding an optional DIR_NAME will change the name of the dir it clones it
# into.  Default is the name of the repo relative to the current working
# directory.

# initial variable defaults to github
# or whatever GITHOST env is set to

GITHOST=${GITHOST:-github.com}

# function

ohai() {
  echo -e "\033[34m==>\033[0m \033[1m$1\033[0m"
}

# parse options

while [ True ]; do
if [ "$1" = "--help" -o "$1" = "-h" ]; then
    echo " "
    echo "$0 [--host] REPO"
    echo " "
    exit
elif [ "$1" = "--host" -o "$1" = "-h" ]; then
    GITHOST="${2}"
    shift 2
elif [ "$1" = "--verbose" -o "$1" = "-v" ]; then
    VERBOSE=1
    shift 1
else
    break
fi
done

# if anything is left, it is NAMESPACE/REPO to be forked
# followed by the desired name of new FORKED_DIR

GITHOST_CONFIG=${GITHOST_CONFIG:-$HOME/.config/githost}

GITHOST_USER=`sed -nr "/^\[$GITHOST\]/ { :l /^user[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "${GITHOST_CONFIG}"`
GITHOST_TOKEN=`sed -nr "/^\[$GITHOST\]/ { :l /^token[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "${GITHOST_CONFIG}"`

FORKED_ORG_REPO="${1}"
FORKED_ORG=${FORKED_ORG_REPO%/*}
FORKED_REPO=${FORKED_ORG_REPO#*/}

FORKED_DIR=${2-${FORKED_ORG_REPO#*/}}
FORKED_URL="$FORKED_ORG/$FORKED_REPO.git"
NEW_FORK_URL="$GITHOST_USER/$FORKED_REPO"
IS_FORKED=$(curl --silent -o /dev/null --fail --write-out "%{http_code}" "${GITHOST}"/"$NEW_FORK_URL")

if [[ "$VERBOSE == 1" ]]; then
echo "HOST: $GITHOST"
echo "USER: $GITHOST_USER"
echo "ORG: $FORKED_ORG"
echo "REPO: $FORKED_REPO"
echo "TOKEN: $GITHOST_TOKEN"
echo "DEST_DIR: $FORKED_DIR"
fi

# main

if [[ "$IS_FORKED" != "404" && "$GITHOST" == "github.com" ]]; then
    ohai "Forking $GITHOST/$FORKED_URL ..."
    curl -sH "Authorization: token $GITHOST_TOKEN" \
	 -X POST \
	 https://api.github.com/repos/$FORKED_ORG/$FORKED_REPO/forks > /dev/null
    sleep 5 # give githost 5 seconds before cloning the newly forked repo
elif [[ "$IS_FORKED" != "404" && "$GITHOST" == "gitlab.com" ]]; then
    ohai "Forking $GITHOST/$FORKED_URL ..."
    curl -s --header "PRIVATE-TOKEN: $GITHOST_TOKEN" \
	 -X POST \
	 https://gitlab.com/api/v4/projects/"$FORKED_ORG"%2F"$FORKED_REPO"/fork
    sleep 5 # give githost 5 seconds before cloning the newly forked repo
else
  ohai "Already forked!  Repo at $NEW_FORK_URL"
fi

printf "\n"
ohai "Cloning new fork from $GITHOST:$GITHOST_USER/$FORKED_REPO.git ..."
git clone git@"${GITHOST}":"${GITHOST_USER}/${FORKED_REPO}.git" "${FORKED_DIR}"

printf "\n"
ohai "Adding upstream remote: ${GITHOST}/${FORKED_URL} ..."
git --git-dir="${FORKED_DIR}"/.git --work-tree="${FORKED_DIR}" \
    remote add upstream "${GITHOST}":"${FORKED_URL}"

printf "\n"
ohai "Fetching from upstream..."
git --git-dir="${FORKED_DIR}"/.git \
    --work-tree="${FORKED_DIR}" \
    fetch upstream

# Update the .git/config to handle upstream in hub better
# 
# Moves around the contents of the .git/config so hub can make use of it better
# when making pull requests.  Prints the following, in order to re-write the
# .git/config (should be idempotent):
#
#   * Grabs the [core] config (everything before a new section)
#   * Grabs the upstream config (line with 'remote "upstream"` plus 2 more
#   * Grabs everything that isn't the core config and upstream config

# Core config lines
GITHOST_CONFIG_CONTENTS="$(sed '/^\[[^"]*"/q' $FORKED_DIR/.git/config | sed \$d)"

# Upstream config lines
GITHOST_CONFIG_CONTENTS="$GITHOST_CONFIG_CONTENTS$(echo; grep 'remote "upstream"' -A 2 $FORKED_DIR/.git/config)"

# Remaining lines (see http://stackoverflow.com/a/19081111 )
GITHOST_CONFIG_CONTENTS="$GITHOST_CONFIG_CONTENTS$(echo; awk 'FNR==NR{a[$0]=1;next}!($0 in a)' <(echo "$GITHOST_CONFIG_CONTENTS") $FORKED_DIR/.git/config)"

echo "$GITHOST_CONFIG_CONTENTS" > $FORKED_DIR/.git/config
